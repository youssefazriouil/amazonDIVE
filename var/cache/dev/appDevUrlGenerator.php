<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * appDevUrlGenerator
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appDevUrlGenerator extends Symfony\Component\Routing\Generator\UrlGenerator
{
    private static $declaredRoutes = array(
        '_wdt' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:toolbarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_wdt',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_home' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:homeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_bar' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchBarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search_bar',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_purge' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:purgeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/purge',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_info' => array (  0 =>   array (    0 => 'about',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:infoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'about',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler/info',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_import' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:importAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/import',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_export' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:exportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '.txt',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/\\.]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler/export',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_phpinfo' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:phpinfoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/phpinfo',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_results' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchResultsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/search/results',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_router' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.router:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/router',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception_css' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:cssAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception.css',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_configurator_home' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::checkAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_configurator/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_configurator_step' => array (  0 =>   array (    0 => 'index',  ),  1 =>   array (    '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::stepAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'index',    ),    1 =>     array (      0 => 'text',      1 => '/_configurator/step',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_configurator_final' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::finalAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_configurator/final',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'frontwise_ajaxlog_log_loadactivity' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Frontwise\\AjaxLogBundle\\Controller\\LogController::loadActivity',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajaxlog/loadActivity',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'frontwise_ajaxlog_log_create' => array (  0 =>   array (    0 => 'level',  ),  1 =>   array (    'level' => 'info',    '_controller' => 'Frontwise\\AjaxLogBundle\\Controller\\LogController::createAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'level',    ),    1 =>     array (      0 => 'text',      1 => '/ajaxlog',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_divetv_search' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\DIVEtvController::searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/vu/api/v2/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_divetv_searchids' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\DIVEtvController::searchIdsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/vu/api/v2/searchids',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_divetv_details' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\DIVEtvController::detailsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/vu/api/v2/entity/details',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_divetv_relatedness' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\DIVEtvController::relatednessAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/vu/api/v2/entity/relatedness',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_divetv_relatedtest' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\DIVEtvController::relatedTestAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/vu/api/v2/entity/related/test',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_divetv_related' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\DIVEtvController::relatedAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/vu/api/v2/entity/related',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_divetv_cacheflush' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\DIVEtvController::cacheFlushAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/vu/api/v2/cache/flush/yesiamsure',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_europeanadata_search' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\EuropeanaDataController::searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/europeana/api/v2/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_europeanadata_searchids' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\EuropeanaDataController::searchIdsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/europeana/api/v2/searchids',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_europeanadata_details' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\EuropeanaDataController::detailsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/europeana/api/v2/entity/details',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_europeanadata_related' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\EuropeanaDataController::relatedAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/europeana/api/v2/entity/related',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_europeanadata_cacheflush' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\EuropeanaDataController::cacheFlushAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/europeana/api/v2/cache/flush/yesiamsure',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_europeanadata_relatedness' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\EuropeanaDataController::relatednessAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/europeana/api/v2/entity/relatedness',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_api_europeanadata_relatedtest' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\APIBundle\\Controller\\EuropeanaDataController::relatedTestAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/europeana/api/v2/entity/related/test',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_browse_index' => array (  0 =>   array (    0 => 'dataset',  ),  1 =>   array (    'dataset' => 'vu',    '_controller' => 'Dive\\FrontBundle\\Controller\\BrowseController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'dataset',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_collection_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\CollectionController::createAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/collection/create',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_collection_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\CollectionController::deleteAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/delete',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/collection',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_collection_list' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    'id' => 0,    '_controller' => 'Dive\\FrontBundle\\Controller\\CollectionController::listAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/collection/list',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_collection_search' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\CollectionController::searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/collection/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_collection_entity' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\CollectionController::entityAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/collection/entity',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_collection_entities' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\CollectionController::entitiesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/collection/entities/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_collection_details' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\CollectionController::detailsAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/details',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/collection',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_collection_add' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\CollectionController::addAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/add',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/collection',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_collection_edit' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\CollectionController::editAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/edit',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/collection',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_collection_remove' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\CollectionController::removeAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/remove',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/collection',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_comment_incrementvotecountbyone' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\CommentController::incrementVoteCountByOne',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/comment/incrementVoteCount',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_comment_decrementvotecountbyone' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\CommentController::decrementVoteCountByOne',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/comment/decrementVoteCount',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_comment_add' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\CommentController::addAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/comment/add',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_diveentity_returnmostpopularentity' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\DiveEntityController::returnMostPopularEntity',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/entity/mostPopular',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_diveentity_count' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\DiveEntityController::countAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/entity/count',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_diveentity_getdescription' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\DiveEntityController::getDescription',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/entity/getDesc',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_diveentity_comments' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\DiveEntityController::commentsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/entity/comments',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_diveentity_multiplecomments' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\DiveEntityController::multipleCommentsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/entity/comments/multiple/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_diveentity_collections' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\DiveEntityController::collectionsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/entity/collections',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_image_cacheflush' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\ImageController::cacheFlushAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/search/images/cache/flush/yesiamsure',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_image_index' => array (  0 =>   array (    0 => 'keywords',  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\ImageController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'keywords',    ),    1 =>     array (      0 => 'text',      1 => '/search/images',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_security_createuser' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\SecurityController::createUserAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/testuser',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_user_current' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\UserController::currentAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/current',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_user_profile' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\UserController::profileAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/profile',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_user_signup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\UserController::signupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/signup',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_user_activate' => array (  0 =>   array (    0 => 'id',    1 => 'hash',  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\UserController::activateAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'hash',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/user/activate',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_user_requestpassword' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\UserController::requestPasswordAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/requestPassword',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'dive_front_user_newpassword' => array (  0 =>   array (    0 => 'id',    1 => 'hash',  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\UserController::newPasswordAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'hash',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/user/newPassword',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Dive\\FrontBundle\\Controller\\SecurityController::loginAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/login',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'logout' => array (  0 =>   array (  ),  1 =>   array (  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/logout',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'login_check' => array (  0 =>   array (  ),  1 =>   array (  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/login_check',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
    );

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
    }

    public function generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens, $requiredSchemes) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens, $requiredSchemes);
    }
}
