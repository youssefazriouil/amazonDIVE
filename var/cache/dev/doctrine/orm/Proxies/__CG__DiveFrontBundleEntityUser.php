<?php

namespace Proxies\__CG__\Dive\FrontBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \Dive\FrontBundle\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'id', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'username', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'salt', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'email', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'organisation', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'name', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'hash', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'isActive', 'collections', 'comments', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'userRoles', 'createdAt', 'updatedAt');
        }

        return array('__isInitialized__', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'id', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'username', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'salt', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'email', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'organisation', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'name', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'hash', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'isActive', 'collections', 'comments', '' . "\0" . 'Dive\\FrontBundle\\Entity\\User' . "\0" . 'userRoles', 'createdAt', 'updatedAt');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function isPasswordLegal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPasswordLegal', array());

        return parent::isPasswordLegal();
    }

    /**
     * {@inheritDoc}
     */
    public function makeHash()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'makeHash', array());

        return parent::makeHash();
    }

    /**
     * {@inheritDoc}
     */
    public function makeSalt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'makeSalt', array());

        return parent::makeSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function getSalt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', array());

        return parent::getSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function eraseCredentials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'eraseCredentials', array());

        return parent::eraseCredentials();
    }

    /**
     * {@inheritDoc}
     */
    public function jsonSerialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'jsonSerialize', array());

        return parent::jsonSerialize();
    }

    /**
     * {@inheritDoc}
     */
    public function serialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'serialize', array());

        return parent::serialize();
    }

    /**
     * {@inheritDoc}
     */
    public function unserialize($serialized)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unserialize', array($serialized));

        return parent::unserialize($serialized);
    }

    /**
     * {@inheritDoc}
     */
    public function isAccountNonExpired()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAccountNonExpired', array());

        return parent::isAccountNonExpired();
    }

    /**
     * {@inheritDoc}
     */
    public function isAccountNonLocked()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAccountNonLocked', array());

        return parent::isAccountNonLocked();
    }

    /**
     * {@inheritDoc}
     */
    public function isCredentialsNonExpired()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCredentialsNonExpired', array());

        return parent::isCredentialsNonExpired();
    }

    /**
     * {@inheritDoc}
     */
    public function isEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEnabled', array());

        return parent::isEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', array());

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserRoles', array());

        return parent::getUserRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function setSalt($salt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSalt', array($salt));

        return parent::setSalt($salt);
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', array($email));

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', array());

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', array($isActive));

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsActive', array());

        return parent::getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    public function addUserRole(\Dive\FrontBundle\Entity\Role $roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUserRole', array($roles));

        return parent::addUserRole($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUserRole(\Dive\FrontBundle\Entity\Role $roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUserRole', array($roles));

        return parent::removeUserRole($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setHash($hash)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHash', array($hash));

        return parent::setHash($hash);
    }

    /**
     * {@inheritDoc}
     */
    public function getHash()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHash', array());

        return parent::getHash();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganisation($organisation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganisation', array($organisation));

        return parent::setOrganisation($organisation);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganisation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganisation', array());

        return parent::getOrganisation();
    }

    /**
     * {@inheritDoc}
     */
    public function addCollection(\Dive\FrontBundle\Entity\Collection $collections)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCollection', array($collections));

        return parent::addCollection($collections);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCollection(\Dive\FrontBundle\Entity\Collection $collections)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCollection', array($collections));

        return parent::removeCollection($collections);
    }

    /**
     * {@inheritDoc}
     */
    public function getCollections()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCollections', array());

        return parent::getCollections();
    }

    /**
     * {@inheritDoc}
     */
    public function addComment(\Dive\FrontBundle\Entity\Comment $comments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComment', array($comments));

        return parent::addComment($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function removeComment(\Dive\FrontBundle\Entity\Comment $comments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeComment', array($comments));

        return parent::removeComment($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', array());

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function updateTimestamps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateTimestamps', array());

        return parent::updateTimestamps();
    }

}
