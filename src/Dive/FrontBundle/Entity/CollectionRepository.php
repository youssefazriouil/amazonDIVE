<?php

namespace Dive\FrontBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CollectionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CollectionRepository extends EntityRepository
{
	public function findByEntity($entity, $user=false){

    // QUERY BUILDER
            $qb = $this
            ->createQueryBuilder('e')
            ->select('e','entities')
            ->leftJoin('e.entities', 'entities')
            ->where('entities.id = :entityId')
            ->setParameter('entityId',$entity->getId())
            ->andWhere('e.public = TRUE OR e.owner = :owner')
            ->setParameter('owner',$user);
            ;
            return $qb->getQuery()->getResult();
      }

      public function findById($id, $user=false){

    // QUERY BUILDER
            $qb = $this
            ->createQueryBuilder('e')
            ->where('e.id = :id')
            ->setParameter('id',$id)
            ->andWhere('e.public = TRUE OR e.owner = :owner')
            ->setParameter('owner',$user);
            ;
            return $qb->getQuery()->getResult();
      }

      public function findByKeywords($keywords, $user=false, $offset=0, $limit=100){
            $keywords = trim($keywords);
            $keywords = explode(' ', $keywords);
            $qb = $this
            ->createQueryBuilder('e')
            ->where('e.public = TRUE OR e.owner = :owner')
            ->setParameter('owner',$user);
            ;

            $index = 1;
            foreach($keywords as $keyword){
                  if (substr($keyword,0,1) == '-'){
                        $keyword = substr($keyword,1);
                        $qb->andWhere('e.title NOT LIKE :keyword' . $index . ' AND e.description NOT LIKE :keyword'.$index);
                  } else{
                        $qb->andWhere('e.title LIKE :keyword' . $index . ' OR e.description LIKE :keyword'.$index);
                  }
                  $qb->setParameter('keyword' .$index,'%'.trim($keyword).'%');
                  $index++;
            }
            $qb->setMaxResults($limit)
            ->setFirstResult($offset);

            return $qb->getQuery()->getResult();
      }

}
